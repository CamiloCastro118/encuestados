{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AdminGuard = /*#__PURE__*/(() => {\n  class AdminGuard {\n    router;\n    platformId;\n    constructor(router, platformId) {\n      this.router = router;\n      this.platformId = platformId;\n    }\n    canActivate() {\n      // En el servidor, siempre redirigir al login\n      if (!isPlatformBrowser(this.platformId)) {\n        this.router.navigate(['/login']);\n        return false;\n      }\n      // Verificar si el usuario está autenticado\n      const userSession = localStorage.getItem('userSession');\n      const userRole = localStorage.getItem('userRole');\n      if (userSession && userRole === 'administrador') {\n        // Usuario autenticado y con rol de administrador\n        return true;\n      } else if (userSession) {\n        // Usuario autenticado pero sin permisos de administrador\n        this.router.navigate(['/home']);\n        return false;\n      } else {\n        // Usuario no autenticado, redirigir al login\n        this.router.navigate(['/login']);\n        return false;\n      }\n    }\n    static ɵfac = function AdminGuard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AdminGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(PLATFORM_ID));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminGuard,\n      factory: AdminGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AdminGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}