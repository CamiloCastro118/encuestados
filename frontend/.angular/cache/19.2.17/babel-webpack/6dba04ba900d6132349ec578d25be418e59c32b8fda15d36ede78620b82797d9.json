{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./services/security.service\";\n// Componente principal de toda la aplicacion\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    router;\n    securityService;\n    // Nombre de la aplicacion\n    title = 'encuestas-app';\n    showNavbar = false;\n    constructor(router, securityService) {\n      this.router = router;\n      this.securityService = securityService;\n    }\n    ngOnInit() {\n      // Escuchar cambios de ruta para mostrar/ocultar navbar\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n        // Mostrar navbar solo en páginas autenticadas que no sean home ni login\n        this.showNavbar = this.shouldShowNavbar(event.url);\n      });\n      // Verificar ruta inicial\n      this.showNavbar = this.shouldShowNavbar(this.router.url);\n    }\n    shouldShowNavbar(url) {\n      // No mostrar navbar en login\n      if (url.includes('/login')) {\n        return false;\n      }\n      // En home, mostrar navbar solo si está autenticado\n      if (url === '/home' || url === '/' || url === '') {\n        return this.securityService.isAuthenticated();\n      }\n      // En otras páginas protegidas, mostrar si está autenticado\n      return this.securityService.isAuthenticated() && (url.includes('/encuestas') || url.includes('/administrador') || url.includes('/directivo'));\n    }\n    static ɵfac = function AppComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.SecurityService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 1,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtext(0, \"\\uFFFD\\uFFFD<\");\n        }\n      },\n      dependencies: [CommonModule],\n      encapsulation: 2\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}